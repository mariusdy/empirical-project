```python =
  import requests
from bs4 import BeautifulSoup
import pandas as pd

data =[]

for u in range (2019,2025):
  for y in range (1,53):
    url = f"https://snepmusique.com/les-tops/le-top-de-la-semaine/top-albums/?semaine={y}&annee={u}" 
    response = requests.get(url)
    html = response.text
    soup = BeautifulSoup(html, 'html.parser')
    ranking = soup.find_all('div', class_=['rang', 'titre', 'artiste', 'editeur'])
    formatted_ranking = []

    i = 0
    while i < 200:
      rank = ranking[i].get_text(strip=True)
      i = i+1
      title = ranking[i].get_text(strip=True)
      i = i+1
      artist = ranking[i].get_text(strip=True)
      i = i+1
      editor = ranking[i].get_text(strip=True)
      i = i+1
      formatted_ranking.append(f"{rank} , {title} , {artist} , {editor}")
      data.append([rank , title , artist , editor,u,y])

df=pd.DataFrame(data,columns=['Rank','Album','Artist','Editor','Year','Week'])
df.columns = df.columns.str.strip()
pd.set_option('display.width', None)
pd.set_option('display.max_columns', None)
df_save = df
df_save.to_csv('snep_albums.csv', index=False)
df.head()

  import requests
from bs4 import BeautifulSoup
import pandas as pd
import urllib.parse

df['Album'] = df['Album'].str.strip().str.lower()
df['Artist'] = df['Artist'].str.strip().str.lower()

df['Tags'] = ''
for i in df.index:
  print(i)
  if df.loc[i, 'Tags'] != '':
    continue
  else :
    a = df.loc[i, 'Artist']
    b = df.loc[i, 'Album']
    if isinstance(b, str):
      c = b.strip().lower()
    else:
      print(f"Skipping index {i} due to invalid 'Album' value: {b}")
      continue
    a = urllib.parse.quote(a)
    b = urllib.parse.quote(b)
    url1 = f"http://ws.audioscrobbler.com/2.0/?method=album.getinfo&artist={a}&album={b}&api_key=1d0c327ec0a8172e6590639a3a976d2b&format=json"
    response1 = requests.get(url1)
    if response1.status_code == 200:
      try:
        json_data = response1.json()
        if 'album' in json_data and 'tags' in json_data['album'] and 'tag' in json_data['album']['tags']:
            tags_data = json_data['album']['tags']['tag']
            if isinstance(tags_data, list):
                genres = [tag['name'] for tag in tags_data]
            elif isinstance(tags_data, dict):
                genres = [tags_data['name']]
            else:
                genres = []
                df.loc[df['Album'] == c, 'Tags'] = 'Unknown'
        else:
            print("Error: Expected data not found in the response.")
            df.loc[df['Album'] == c, 'Tags'] = 'Unknown'
            genres = []
      except requests.exceptions.JSONDecodeError:
          print(f"Error decoding JSON for URL: {url1}")
          df.loc[df['Album'] == c, 'Tags'] = 'Unknown'
          genres = []
    else:
      print(f"Request failed with status code {response1.status_code} for URL: {url1}")
      df.loc[df['Album'] == c, 'Tags'] = 'Unknown'
      genres = []

    if genres != []:
        df.loc[df['Album'] == c, 'Tags'] = ' '.join(genres)
    else:
        df.loc[df['Album'] == c, 'Tags'] = 'Unknown'
        pass

df.loc[df['Artist'] == 'JUL', 'Tags'] = 'rap hip-hop french'

df.head()

  from google.colab import drive
drive.mount('drive',force_remount=True)
df_save = df
df.to_csv('data.csv')
!cp data.csv "drive/My Drive/"

  import pandas as pd
from google.colab import drive

df=[]
drive.mount('drive',force_remount=True)
df = pd.read_csv('drive/My Drive/data.csv')

df.head()

  import matplotlib.pyplot as plt
import seaborn as sns

artist_counts = df['Artist'].value_counts()
top_10_artists = artist_counts.head(10)

plt.figure(figsize=(12,6))
sns.barplot(x=top_10_artists.values, y=top_10_artists.index, palette='coolwarm', hue=top_10_artists.values, legend=False)
plt.title('Number of week in the album top 50')
plt.xlabel('Number of weeks')
plt.ylabel('Artists')
plt.grid(True, axis='x', linestyle='--', linewidth=0.7)

plt.show()

  df_distinct_weeks = df.drop_duplicates(subset=['Artist', 'Year','Week'])
weeks_per_artist = df_distinct_weeks['Artist'].value_counts()
total_weeks = 52*6
percentage = (weeks_per_artist / total_weeks) * 100

weeks_per_artist.head(10)
result_df = pd.DataFrame({
    'Artist': weeks_per_artist.index,
    'Weeks': weeks_per_artist.values,
    'Percentage': percentage.values.round(2)})

mean = result_df['Weeks'].mean().round()
week1 = result_df[result_df['Weeks']<mean].count()

print(f'On average, an album stays {mean} weeks in the top 50 once it reached it. However, {week1.iloc[0]} albums, (on a total of {result_df.index.size}) have stayed on the top less than {mean} weeks')

result_df.head()

  artist_data = {'Artist': [], 'Albums': []}
for artist in top_10_artists.index:
    artist_data['Artist'].append(artist)
    artist_data['Albums'].append(df[df['Artist'] == artist]['Album'].nunique())



artist_data_df = pd.DataFrame(artist_data)
print(artist_data_df)

editors_counts = df['Editor'].value_counts()

top_10_editors = editors_counts.head(10)


plt.figure(figsize=(12,6))
sns.barplot(x=top_10_editors.values, y=top_10_editors.index, palette='coolwarm', hue=top_10_editors.values, legend=False)
plt.title('Number of week in the album top 50')
plt.xlabel('Number of weeks')
plt.ylabel('Editor')
fontsize= 'big'
font = {'fontname':'Helvetica'}
plt.show()

  tags_series = df['Tags'].dropna().str.split(' ', expand=True).stack()
tags_series_filtered = tags_series[(tags_series != 'Unknown') & (tags_series != 'albums')&(tags_series != 'hop')&(tags_series != 'hip')]
tag_counts = tags_series_filtered.value_counts()

import seaborn as sns
sns.set(style="whitegrid")

plt.figure(figsize=(10, 6))
sns.barplot(x=tag_counts.head(10).index, y=tag_counts.head(10), palette='coolwarm')

plt.title('Top 10 Most Common Tags')
plt.xlabel('Tags')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.tight_layout()

# Show the plot
plt.show()
